[{"name":"app.R","content":"# Load required libraries\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(dplyr)\nlibrary(DT)\nlibrary(leaflet)\nlibrary(leaflet)\nlibrary(leaflet.extras)\nlibrary(tidygeocoder)\nlibrary(tidyverse)\nlibrary(viridis)\nlibrary(shinycssloaders)\nlibrary(rvest)\n\n# Define the URL for the CSV file\nfilepath <- \"https://raw.githubusercontent.com/sushantag9/Supermarket-Sales-Data-Analysis/master/supermarket_sales%20-%20Sheet1.csv\"\n\n# URL for the exchange rate\nUrlER_USD_MMK <- \"https://www.xe.com/de/currencyconverter/convert/?Amount=1&From=USD&To=MMK\"\nUrlER_USD_CHF <- \"https://www.xe.com/de/currencyconverter/convert/?Amount=1&From=USD&To=CHF\"\nUrlER_USD_EUR <- \"https://www.xe.com/de/currencyconverter/convert/?Amount=1&From=USD&To=EUR\"\n\n# Define the header\nheader <- dashboardHeader(\n  title = \"Supermarket Sales\"\n)\n\n# Define the sidebar\nsidebar <- dashboardSidebar(\n  sidebarMenu(\n    menuItem(\"Charts\", tabName = \"charts\"),\n    menuItem(\"Map\", tabName = \"map\"),\n    menuItem(\"Exchange Rate\", tabName = \"exchange\"),\n    menuItem(\"Inputs\", tabName = \"inputs\")\n  )\n)\n\n# Define the body\nbody <- dashboardBody(\n  tabItems(\n    tabItem(\n      tabName = \"inputs\",\n      tabBox(\n        title = \"Input data\",\n        width = 12,\n        tabPanel(\"Data Table\", DTOutput(\"sales_table\"))\n      )\n    ),\n    tabItem(\n      tabName = \"map\",\n      tabBox(\n        title = \"Map\",\n        width = 12,\n        tabPanel(\n          \"Map\",\n          \"All store locations\",\n          leafletOutput(\"sales_map\", height = 800) %>% withSpinner()\n        )\n      )\n    ),\n    tabItem(\n      tabName = \"charts\",\n      tabBox(\n        title = \"Charts\",\n        width = 12,\n        tabPanel(\n          \"By payment methode\",\n          inputPanel(\n            selectInput(\"payment_methode\", \"Select a payment methode\",\n              choices = \"\",\n              selected = \"Ewallet\",\n              multiple = TRUE\n            )\n          ),\n          plotOutput(\"vis_income\")\n        ),\n        tabPanel(\n          \"By city\",\n          inputPanel(\n            selectInput(\"city\", \"Select a city\",\n              choices = \"\",\n              selected = \"Yangon\",\n              multiple = TRUE\n            )\n          ),\n          plotOutput(\"vis_city\"),\n          plotOutput(\"vis_city_date\")\n        ),\n        tabPanel(\n          \"Custom\",\n          inputPanel(\n            selectInput(\"city2\", \"Select a city\",\n              choices = \"\",\n              selected = \"Yangon\",\n              multiple = TRUE\n            ),\n            selectInput(\"payment_methode2\", \"Select a payment methode\",\n              choices = \"\",\n              selected = \"Ewallet\",\n              multiple = TRUE\n            ),\n            selectInput(\"gender\", \"Select a gender\",\n              choices = \"\",\n              selected = \"Male\",\n              multiple = TRUE\n            ),\n            selectInput(\"product_line\", \"Select a product line\",\n              choices = \"\",\n              selected = \"Health and beauty\",\n              multiple = TRUE\n            ),\n            selectInput(\"member_type\", \"Select a member type\",\n              choices = \"\",\n              selected = \"Normal\",\n              multiple = TRUE\n            )\n          ),\n          plotOutput(\"custom\")\n        ),\n        tabPanel(\n          \"Reviews\",\n          inputPanel(\n            selectInput(\"member_type2\", \"Select a member type\",\n              choices = \"\",\n              selected = \"Normal\",\n              multiple = TRUE\n            )\n          ),\n          plotOutput(\"vis_ratings\")\n        ),\n      )\n    ),\n    tabItem(\n      tabName = \"exchange\",\n      tabBox(\n        title = \"Exchange Rates\",\n        width = 12,\n        tabPanel(\n          \"Current Exchange Rates\",\n          selectInput(\"exchange\", \"Select an exchange rate\", choices = c(\"USD to MMK\", \"USD to CHF\", \"USD to EUR\"), selected = \"USD to MMK\"),\n          textOutput(\"exchangeRate_Text\") %>% withSpinner()\n        )\n      )\n    )\n  )\n)\n\n\n# Define the UI\nui <- dashboardPage(\n  header,\n  sidebar,\n  body\n)\n\n# Define the server logic\nserver <- function(input, output, session) {\n  # Reactive expression to fetch the data\n  sales_data <- reactive({\n    read.csv(url(filepath))\n  })\n\n  # Get geocode of the cities\n  geocoded_data <- reactive({\n    data <- sales_data() %>%\n      distinct(City)\n    geo_data <- data %>%\n      geocode(City, method = \"osm\")\n    geo_data\n  })\n\n  # Render the data table\n  output$sales_table <- renderDT({\n    datatable(sales_data(), options = list(pageLength = 10, autoWidth = TRUE))\n  })\n\n  # Render the leaflet map\n  output$sales_map <- renderLeaflet({\n    geo_data <- geocoded_data()\n\n    leaflet(geo_data) %>%\n      addProviderTiles(providers$Esri.NatGeoWorldMap) %>%\n      addTiles() %>%\n      addResetMapButton() %>%\n      addCircleMarkers(\n        ~long, ~lat,\n        label = ~City,\n        radius = 20,\n        color = \"blue\",\n        fillOpacity = 0.8\n      )\n  })\n\n  # Render income plot\n  output$vis_income <- renderPlot({\n    sales_data() %>%\n      filter(Payment %in% input$payment_methode) %>%\n      group_by(Payment) %>%\n      summarise(Total = sum(Total)) %>%\n      ggplot(aes(x = Payment, y = Total, fill = Payment)) +\n      geom_col() +\n      labs(\n        title = \"Amount of sales per payment method\",\n        x = \"Payment Method\",\n        y = \"Total Sales\"\n      ) +\n      scale_y_continuous() +\n      theme_minimal(base_size = 14) +\n      scale_color_viridis(discrete = TRUE)\n  })\n\n  # Render plots by city\n  output$vis_city <- renderPlot({\n    sales_data() %>%\n      filter(City %in% input$city) %>%\n      group_by(City) %>%\n      summarise(Total = sum(Total)) %>%\n      ggplot(aes(x = City, y = Total, fill = City)) +\n      geom_col() +\n      labs(\n        title = \"Amount of sales per city\",\n        x = \"City\",\n        y = \"Total Sales\"\n      ) +\n      scale_y_continuous() +\n      theme_minimal(base_size = 14) +\n      scale_color_viridis(discrete = TRUE, option = \"C\")\n  })\n\n  # Render plots by city and date\n  output$vis_city_date <- renderPlot({\n    sales_data() %>%\n      filter(City %in% input$city) %>%\n      mutate(Date = as.Date(Date, format = \"%m/%d/%Y\")) %>%\n      arrange(Date) %>%\n      group_by(City, Date) %>%\n      summarise(Total = sum(Total), .groups = \"drop\") %>%\n      ggplot(aes(x = Date, y = Total, color = City)) +\n      geom_line() +\n      labs(\n        title = \"Amount of sales per city\",\n        x = \"City\",\n        y = \"Total Sales\"\n      ) +\n      scale_y_continuous() +\n      theme_minimal(base_size = 14) +\n      scale_color_viridis(discrete = TRUE)\n  })\n\n  # Render customised plot\n  output$custom <- renderPlot({\n    sales_data() %>%\n      filter(\n        City %in% input$city2,\n        Payment %in% input$payment_methode2,\n        Gender %in% input$gender,\n        `Product.line` %in% input$product_line,\n        `Customer.type` %in% input$member_type\n      ) %>%\n      group_by(City) %>%\n      summarise(Total = sum(Total)) %>%\n      ggplot(aes(x = City, y = Total, fill = City)) +\n      geom_col() +\n      labs(\n        title = \"Amount of sales per city with filters\",\n        x = \"City\",\n        y = \"Total Sales\"\n      ) +\n      scale_y_continuous() +\n      theme_minimal(base_size = 14)\n  })\n\n  # Render ratings plot\n  output$vis_ratings <- renderPlot({\n    sales_data() %>%\n      filter(`Customer.type` %in% input$member_type2) %>%\n      group_by(City) %>%\n      summarise(Average_Rating = mean(Rating), .groups = \"drop\") %>%\n      ggplot(aes(x = City, y = Average_Rating, fill = City)) +\n      geom_col() +\n      labs(\n        title = \"Average rating per city\",\n        x = \"City\",\n        y = \"Rating\"\n      ) +\n      scale_y_continuous() +\n      theme_minimal(base_size = 14) +\n      scale_color_viridis(discrete = TRUE)\n  })\n\n  # Reactive expression to fetch exchange rate\n  exchangeRate <- reactive({\n    # Invalidate this reactive expression every 60 seconds to update the rate\n    invalidateLater(60000, session)\n\n    # Determine the URL based on the selected currency pair\n    URLExchangeRate <- switch(input$exchange,\n      \"USD to MMK\" = UrlER_USD_MMK,\n      \"USD to CHF\" = UrlER_USD_CHF,\n      \"USD to EUR\" = UrlER_USD_EUR,\n      NULL\n    )\n\n    req(URLExchangeRate) # Ensure a URL is selected\n\n    page <- rvest::read_html(URLExchangeRate)\n    rate <- page %>%\n      rvest::html_nodes(\".sc-295edd9f-1\") %>%\n      rvest::html_text()\n\n    # Return the fetched rate\n    rate\n  })\n\n  # Output the exchange rate\n  output$exchangeRate_Text <- renderText({\n    rate <- exchangeRate()\n    paste(\"1 USD dollar is currently: \", rate)\n  })\n\n  # Observe changes in sales_data and update selectInput accordingly\n  observe({\n    # Ensure sales_data is available before trying to use it\n    if (is.null(sales_data())) {\n      return()\n    }\n\n    # Extract unique payment methods from the sales_data\n    unique_payments <- unique(sales_data()$Payment)\n\n    # Update the selectInput with the unique payment methods\n    updateSelectInput(session, \"payment_methode\",\n      choices = unique_payments,\n      selected = \"Ewallet\"\n    )\n\n    # Update the selectInput with the unique payment methods\n    updateSelectInput(session, \"payment_methode2\",\n      choices = unique_payments,\n      selected = \"Ewallet\"\n    )\n\n    # Update the selectInput with the unique cities\n    updateSelectInput(session, \"city\",\n      choices = unique(sales_data()$City),\n      selected = \"Yangon\"\n    )\n\n    # Update the selectInput with the unique cities\n    updateSelectInput(session, \"city2\",\n      choices = unique(sales_data()$City),\n      selected = \"Yangon\"\n    )\n\n    # Update the selectInput with the gender values\n    updateSelectInput(session, \"gender\",\n      choices = unique(sales_data()$Gender),\n      selected = \"Male\"\n    )\n\n    # Update the selectInput with the product line values\n    updateSelectInput(session, \"product_line\",\n      choices = unique(sales_data()$Product.line),\n      selected = \"Health and beauty\"\n    )\n\n    # Update the selectInput with the member type values\n    updateSelectInput(session, \"member_type\",\n      choices = unique(sales_data()$Customer.type),\n      selected = \"Normal\"\n    )\n\n    # Update the selectInput with the member type values\n    updateSelectInput(session, \"member_type2\",\n      choices = unique(sales_data()$Customer.type),\n      selected = \"Normal\"\n    )\n  })\n}\n\n# Run the application\nshinyApp(ui, server)\n","type":"text"}]
